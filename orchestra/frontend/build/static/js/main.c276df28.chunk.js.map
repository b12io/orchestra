{"version":3,"sources":["serviceWorker.js","state/selectors/taskSelectors.ts","assets/ShuffleIcon.tsx","state/slices/timer.ts","components/navbar/Navbar.tsx","views/available_tasks/AvailableTasks.tsx","assets/AnimatedCircle.tsx","util/time.ts","components/TasksList/helpers.ts","components/TasksList/TasksList.tsx","state/slices/dashboardTasks.ts","views/dashboard/Dashboard.tsx","views/task/Task.tsx","App.tsx","state/rootReducer.ts","state/store.ts","index.js"],"names":["Boolean","window","location","hostname","match","TaskStates","ShuffleIcon","width","height","viewBox","version","xmlns","xmlnsXlink","id","stroke","strokeWidth","fill","fillRule","transform","fill-rule","d","timer","createSlice","name","initialState","status","reducers","getTimerStart","state","getTimerSuccess","action","payload","getTimerFailure","Navbar","history","useHistory","dispatch","useDispatch","useEffect","a","actions","axios","get","response","data","className","onClick","push","simple","toggle","primaryText","label","Task","AnimatedCircle","getLocalTime","datetimeString","moment","utc","tz","guess","specialFormatIfToday","localTime","isSame","Date","getPrettyDatetime","customFormat","showTime","datetime","format","TASK_LABEL_MAPPING","TaskList","tasks","isLoading","useState","column","direction","sortStatus","setSortStatus","taskList","setTaskList","searchedItem","setSearchedItem","results","filter","task","lowerCaseSearchedItem","toLocaleLowerCase","detail","toLowerCase","includes","project","step","tagMapping","handleHeaderClick","newSortStatus","sortedTasks","sort","firstTask","secondTask","taskProperty","sortTasks","numberOfTasksText","length","padding","verticalAlign","cardLike","statusLabels","success","error","default","warning","colSpan","placeholder","searchIcon","onUpdate","value","map","rowLabel","index","key","align","row","assigned","assignment_start_datetime","startBy","next_todo_dict","start_by_datetime","dueBy","due_datetime","rowUrl","colorRow","isAfter","event","ctrlKey","metaKey","open","tags","tag","colorProps","size","filled","description","dashboardTasks","reviewerStatus","loading","getTodosStart","getTodosSuccess","getTodosFailure","ACTIVE_TASK_STATES","JustAdded","InProgress","Returned","PENDING_TASK_STATES","PendingReview","PendingProcessing","tasksSelector","getActiveTasksSelector","createSelector","should_be_active","getPendingTasksSelector","getPausedTasksSelector","Paused","getCompletedTasksSelector","Complete","taskLoadingStateSelector","Dashboard","activeTasks","useSelector","pendingTasks","pausedTasks","completedTasks","taskId","useParams","App","path","children","AvailableTasks","rootReducer","combineReducers","reducer","store","configureStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.c276df28.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createSelector } from 'reselect'\n\nimport { RootState } from '../rootReducer'\n\nexport enum TaskStates {\n  JustAdded = 'just_added',\n  InProgress = 'in_progress',\n  Returned = 'returned',\n  PendingReview = 'pending_review',\n  PendingProcessing = 'pending_processing',\n  Paused = 'paused',\n  Complete = 'complete'\n}\n\nconst ACTIVE_TASK_STATES = [\n  TaskStates.JustAdded,\n  TaskStates.InProgress,\n  TaskStates.Returned\n]\n\nconst PENDING_TASK_STATES = [\n  TaskStates.PendingReview,\n  TaskStates.PendingProcessing\n]\n\nexport const tasksSelector = (state: RootState) => state.dashboardTasks.tasks\n\nexport const getActiveTasksSelector = createSelector(\n  tasksSelector,\n  tasks => tasks.filter(\n    task => ACTIVE_TASK_STATES.includes(task.state) && task.should_be_active\n  )\n)\n\nexport const getPendingTasksSelector = createSelector(\n  tasksSelector,\n  tasks => tasks.filter(\n    task => (ACTIVE_TASK_STATES.includes(task.state) && !task.should_be_active) ||\n      PENDING_TASK_STATES.includes(task.state)\n  )\n)\n\nexport const getPausedTasksSelector = createSelector(\n  tasksSelector,\n  tasks => tasks.filter(task => task.state === TaskStates.Paused)\n)\n\nexport const getCompletedTasksSelector = createSelector(\n  tasksSelector,\n  tasks => tasks.filter(task => task.state === TaskStates.Complete)\n)\n\nexport const taskLoadingStateSelector = (state: RootState) => state.dashboardTasks.loading\n","import React from 'react';\n\nconst ShuffleIcon = () => {\n  return (\n    <svg width=\"24px\" height=\"18px\" viewBox=\"0 0 24 18\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\">\n      <g id=\"Dashboard-–-Tabular\" stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\n          <g transform=\"translate(-30.000000, -25.000000)\" fill=\"#695FF6\" fill-rule=\"nonzero\" id=\"Header\">\n              <g>\n                  <g id=\"Group\">\n                      <g transform=\"translate(30.000000, 23.000000)\">\n                          <g id=\"shuffle-98\" transform=\"translate(0.000000, 2.000000)\">\n                              <path d=\"M0,5 L4.219,5 C5.069,5 5.881,5.362 6.448,5.993 L7.809,7.505 L9.154,6.01 L7.934,4.654 C6.989,3.604 5.635,3 4.219,3 L0,3 L0,5 Z\" id=\"Path\"></path>\n                              <path d=\"M24,4 L19,0 L19,3 L16.781,3 C15.365,3 14.01,3.604 13.065,4.655 L6.448,12.007 C5.881,12.638 5.068,13 4.219,13 L0,13 L0,15 L4.219,15 C5.635,15 6.99,14.396 7.935,13.345 L14.552,5.993 C15.119,5.362 15.932,5 16.781,5 L19,5 L19,8 L24,4 Z\" id=\"Path\"></path>\n                              <path d=\"M24,14 L19,10 L19,13 L16.781,13 C15.931,13 15.119,12.638 14.552,12.007 L13.191,10.495 L11.846,11.99 L13.066,13.345 C14.011,14.397 15.366,15 16.782,15 L19,15 L19,18 L24,14 Z\" id=\"Path\"></path>\n                          </g>\n                      </g>\n                  </g>\n              </g>\n          </g>\n      </g>\n    </svg>\n  )\n}\n\nexport default ShuffleIcon\n","import axios from 'axios'\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nimport { AppThunk } from '../store'\n\ninterface Timer {\n  id: number,\n  start_time: string | null,\n  stop_time: string | null,\n  description: string | null,\n  worker: number,\n  assignment: number | null,\n  time_worked: string\n}\n\ninterface TimerState {\n  status: Timer | null\n}\n\nconst initialState: TimerState = {\n  status: null\n}\n\nconst timer = createSlice({\n  name: 'timer',\n  initialState,\n  reducers: {\n    getTimerStart(state) {\n      // state.loading = true\n      // state.error = null\n    },\n    getTimerSuccess(state, action: PayloadAction<Timer>) {\n      state.status = action.payload\n    },\n    getTimerFailure(state, action: PayloadAction<string>) {\n      // state.loading = false\n      // state.error = action.payload\n    }\n  }\n})\n\nexport default timer\n\nexport const fetchTimer = (): AppThunk => async dispatch => {\n  try {\n    dispatch(timer.actions.getTimerStart())\n    const response = await axios.get('/orchestra/api/interface/timer/')\n    const data: Timer = response.data\n    dispatch(timer.actions.getTimerSuccess(data))\n  } catch (err) {\n    dispatch(timer.actions.getTimerFailure(err))\n  }\n}\n","import React, { useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useHistory } from 'react-router-dom'\n\nimport AvatarItem from '@b12/metronome/components/layout/avatar/AvatarItem.es6.js'\nimport Grid from '@b12/metronome/components/layout/grid/Grid.es6.js'\nimport { Clock, CaretDown } from '@b12/metronome/components/Icons.es6.js'\nimport Dropdown from '@b12/metronome/components/layout/dropdown/Dropdown.es6.js'\nimport DropdownItem from '@b12/metronome/components/layout/dropdown/DropdownItem.es6.js'\n\nimport './Navbar.scss'\n\nimport ShuffleIcon from 'assets/ShuffleIcon'\nimport { fetchTimer } from 'state/slices/timer'\n\nconst Navbar = () => {\n  const history = useHistory()\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(fetchTimer())\n  }, [])\n\n  const handleHomeClick = () => {\n    history.push('/')\n  }\n\n  return (\n    <div className=\"navbar\">\n      <Grid>\n        <div className=\"navbar__home align-row\" onClick={handleHomeClick}>\n          <ShuffleIcon />\n          <h4>Orchestra</h4>\n        </div>\n        <div className=\"navbar__timecard align-row\">\n          <Clock />\n          <p>2h 15m</p>\n        </div>\n        <Dropdown\n          className=\"navbar__dropdown\"\n          simple\n          toggle={\n            <div className=\"navbar__avatar align-row\">\n              <AvatarItem primaryText=\"Elston Aijan\" />\n              <CaretDown className=\"navbar__avatar-caret\"/>\n            </div>}>\n          <DropdownItem\n            label=\"Dashboard\"\n            onClick={() => { history.push('/') }}\n          />\n          <DropdownItem\n            label=\"Timecard\"\n            onClick={() => { history.push('/timecard/') }}\n          />\n          <DropdownItem\n            label=\"Available tasks\"\n            onClick={() => { history.push('/communication/available-staffing-requests') }}\n          />\n          <DropdownItem\n            label=\"Project management\"\n            onClick={() => { history.push('/project/') }}\n          />\n          <DropdownItem\n            label=\"Account settings\"\n            onClick={() => { history.push('/accounts/settings') }}\n          />\n          <DropdownItem\n            label=\"Sign out\"\n            onClick={() => { history.push('/accounts/logout_then_login') }}\n          />\n        </Dropdown>\n      </Grid>\n    </div>\n  )\n}\n\nexport default Navbar\n","import React from 'react'\n\nconst Task = () => {\n  return (\n        <div>\n          Available tasks table\n        </div>\n    )\n}\n\nexport default Task;\n","import React from 'react'\nimport {\n    RotateForward\n} from '@b12/metronome/components/Icons.es6.js'\n\nimport './AnimatedCircle.scss'\n\nconst AnimatedCircle = () => {\n    return (\n      <div className=\"animated-circle\">\n        <RotateForward />\n      </div>\n    )\n}\n\nexport default AnimatedCircle\n","import moment from 'moment-timezone'\n\nexport const getLocalTime = (datetimeString) => {\n  return datetimeString ? moment.utc(datetimeString).tz(moment.tz.guess()) : null\n}\n\nexport const specialFormatIfToday = (datetimeString) => {\n  const localTime = datetimeString ? moment.utc(datetimeString).tz(moment.tz.guess()) : null\n  if (localTime && localTime.isSame(new Date(), 'day')) {\n    return '[Today], h:mm a'\n  }\n  return null\n}\n\nexport const getPrettyDatetime = (datetimeString, customFormat=null, showTime=false) => {\n  const datetime = getLocalTime(datetimeString)\n  if (datetime === null) {\n    return null\n  } else if (customFormat) {\n    return datetime.format(customFormat)\n  } else if (showTime) {\n    return datetime.format('ddd, MMM D h:mm a')\n  } else {\n    return datetime.format('ddd, MMM D')\n  }\n}\n\nexport const isOutdated = (datetimeString) => {\n  const now = moment().utc()\n  return now.isAfter(datetimeString)\n}\n","import { Task } from 'state/slices/dashboardTasks'\n\nexport type SortStatus = {\n  column: string | null;\n  direction: 'ascending' | 'descending';\n}\n\nconst TASK_LABEL_MAPPING = {\n  'Details': 'detail',\n  'Project / Task': 'project',\n  'Assigned': 'assignment_start_datetime'\n}\n\nconst SORT_ASCENDING = 1\nconst SORT_DESCENDING = -1\n\nexport const sortTasks = (tasks: Task[], sortStatus: SortStatus): Task[] => {\n  const { column, direction } = sortStatus\n  const sortedTasks = tasks\n  sortedTasks.sort((firstTask, secondTask) => {\n    const taskProperty = TASK_LABEL_MAPPING[column] ?? TASK_LABEL_MAPPING['Details']\n    return firstTask[taskProperty].toLowerCase() > secondTask[taskProperty].toLowerCase()\n      ? direction === 'ascending' ? SORT_ASCENDING : SORT_DESCENDING\n      : direction === 'ascending' ? SORT_DESCENDING : SORT_ASCENDING\n  })\n\n  return sortedTasks\n}\n","import React, { useState, useEffect } from 'react'\nimport {\n  useHistory\n} from 'react-router-dom'\n\nimport './TasksList.scss'\n\nimport Table from '@b12/metronome/components/layout/table/Table.es6'\nimport TableHead from '@b12/metronome/components/layout/table/TableHead.es6'\nimport TableBody from '@b12/metronome/components/layout/table/TableBody.es6'\nimport TableRow from '@b12/metronome/components/layout/table/TableRow.es6'\nimport TableCell from '@b12/metronome/components/layout/table/TableCell.es6'\nimport TextField from '@b12/metronome/components/form/textfield/TextField.es6.js'\nimport Badge from '@b12/metronome/components/layout/badge/Badge.es6.js'\nimport StatusIndicator from '@b12/metronome/components/layout/status-indicator/StatusIndicator.es6.js'\nimport {\n  CaretDown\n} from '@b12/metronome/components/Icons.es6.js'\n\nimport AnimatedCircle from '../../assets/AnimatedCircle'\n\nimport { getPrettyDatetime, specialFormatIfToday, isOutdated } from '../../util/time'\nimport { Task } from 'state/slices/dashboardTasks'\n\nimport { sortTasks, SortStatus } from './helpers'\n\ntype ProjectListProps = {\n  status: any;\n  tasks: Task[];\n  isLoading?: boolean;\n}\n\nconst TaskList = ({ status, tasks, isLoading = false }: ProjectListProps) => {\n  const [sortStatus, setSortStatus] = useState<SortStatus>({\n    column: null,\n    direction: 'ascending'\n  })\n  const [taskList, setTaskList] = useState<Task[]>([])\n\n  useEffect(() => {\n    setTaskList(tasks)\n  }, [tasks])\n\n  const [searchedItem, setSearchedItem] = useState('')\n\n  const handleTextChange = value => {\n    setSearchedItem(value)\n  }\n\n  useEffect(() => {\n    const results = tasks.filter(task => {\n      const lowerCaseSearchedItem = searchedItem.toLocaleLowerCase()\n      return task.detail.toLowerCase().includes(lowerCaseSearchedItem) ||\n      task.project.toLowerCase().includes(lowerCaseSearchedItem) ||\n      task.step.toLowerCase().includes(lowerCaseSearchedItem)\n    })\n    setTaskList(results)\n  }, [searchedItem])\n\n  const rowsLabels = [\n    'Details',\n    'Project / Task',\n    'Assigned',\n    'Next steps',\n    'Start by',\n    'Due by'\n  ]\n  // Map Orchestra tag values to Metronome badge color values.\n  const tagMapping = {\n    'default': 'primary',\n    'primary': 'primary', // We'll add `selected` below to make it stand out.\n    'success': 'success',\n    'info': 'neutral',\n    'warning': 'warning',\n    'danger': 'warning' // We'll add `selected` below to make it stand out.\n  }\n  const history = useHistory()\n\n  const renderTasks = () => {\n    return taskList.map(row => {\n      const assigned = getPrettyDatetime(row.assignment_start_datetime, 'MM/DD/YYYY')\n      const startBy = getPrettyDatetime(\n        row.next_todo_dict.start_by_datetime,\n        specialFormatIfToday(row.next_todo_dict.start_by_datetime))\n      const dueBy = getPrettyDatetime(\n        row.next_todo_dict.due_datetime,\n        specialFormatIfToday(row.next_todo_dict.due_datetime))\n\n      const rowUrl = `/task/${row.id}`\n\n      const handleRowClick = (event: MouseEvent) => {\n        if (event.ctrlKey || event.metaKey) {\n          window.open('/orchestra/newapp/#' + rowUrl, '_blank')\n        } else {\n          history.push(rowUrl)\n        }\n      }\n      const colorRow = isOutdated(row.next_todo_dict.due_datetime) && row.state !== 'complete'\n      return (\n        <TableRow key={row.id} onClick={handleRowClick} className={colorRow && 'grey-out'}>\n          <TableCell className='tasks-list__col-1'>\n            <h4>{row.detail}</h4>\n            {row.tags.map((tag, index) => {\n              const colorProps = {\n                [tagMapping[tag.status]]: true,\n                selected: tag.status === 'danger' || tag.status === 'primary' // Make it darker.\n              }\n              return (\n                <Badge\n                  key={index}\n                  size=\"small\"\n                  label={tag.label}\n                  filled\n                  className=\"dsu-mr-xxxsm\"\n                  {...colorProps}\n                />\n              )\n            })}\n          </TableCell>\n          <TableCell className='tasks-list__col-2'><p>{row.project} / {row.step}</p></TableCell>\n          <TableCell className='tasks-list__col-3'><p>{assigned}</p></TableCell>\n          <TableCell className='tasks-list__col-4'><p>{row.next_todo_dict.description}</p></TableCell>\n          <TableCell className='tasks-list__col-5'><p>{startBy}</p></TableCell>\n          <TableCell><p>{dueBy}</p></TableCell>\n        </TableRow>\n      )\n    })\n  }\n\n  const renderEmptyList = () => (\n    <TableRow>\n      <TableCell/>\n      <TableCell/>\n      <TableCell><p>No tasks</p></TableCell>\n      <TableCell/>\n      <TableCell/>\n      <TableCell/>\n    </TableRow>\n  )\n\n  const handleHeaderClick = (column) => {\n    let direction\n    if (column !== sortStatus.column) {\n      direction = 'ascending'\n    } else {\n      direction = sortStatus.direction === 'ascending' ? 'descending' : 'ascending'\n    }\n\n    const newSortStatus = { direction, column }\n    const sortedTasks = sortTasks(taskList, newSortStatus)\n\n    setTaskList(sortedTasks)\n    setSortStatus(newSortStatus)\n  }\n\n  const renderSortCaret = () => {\n    return sortStatus.direction === 'ascending'\n      ? <CaretDown />\n      : <CaretDown className=\"caret-up\" />\n  }\n\n  const numberOfTasksText = `${tasks.length} task${tasks.length > 1 ? 's' : ''}`\n\n  return (\n    <div className='tasks-list__wrapper'>\n      <Table\n        padding='compact'\n        verticalAlign='middle'\n        className='tasks-list'\n        cardLike\n      >\n        <TableHead padding=\"compact\">\n          <TableRow>\n            <th className='tasks-list__status-row'>\n              <b><StatusIndicator\n                status={status}\n                className='dsu-mr-xxxsm'\n                statusLabels={{\n                  success: 'Active',\n                  error: 'Paused',\n                  default: 'Completed',\n                  warning: 'Pending'\n                }}\n              /></b>\n              {isLoading ? <AnimatedCircle /> : <p>{numberOfTasksText}</p>}\n            </th>\n            <th colSpan={2}/>\n            <th colSpan={4}>\n              <div className=\"navbar__textfield\">\n                <TextField\n                  placeholder=\"Search projects...\"\n                  searchIcon\n                  onUpdate={handleTextChange}\n                  value={searchedItem}\n                />\n              </div>\n            </th>\n          </TableRow>\n        </TableHead>\n        <TableHead>\n          <TableRow>\n            {rowsLabels.map((rowLabel, index) => (\n              <TableCell\n                key={rowLabel}\n                align='left'\n                className={`tasks-list__col-${index + 1}`}\n                onClick={() => handleHeaderClick(rowLabel)}\n              >\n                <div className=\"tasks-list__col-header\">\n                  <p>{rowLabel}</p>\n                  {sortStatus.column === rowLabel && renderSortCaret()}\n                </div>\n              </TableCell>\n            ))}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {taskList.length !== 0 || isLoading\n            ? renderTasks()\n            : renderEmptyList()}\n        </TableBody>\n      </Table>\n    </div>\n\n  )\n}\n\nexport default TaskList\n","import axios from 'axios'\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nimport { AppThunk } from '../store'\nimport { TaskStates } from '../selectors/taskSelectors'\n\nexport interface NextTodo {\n  description: string;\n  start_by_datetime: string;\n  due_datetime: string;\n}\n\nexport interface Task {\n  step: string;\n  next_todo_dict: NextTodo;\n  tags: any[];\n  project: string;\n  priority: number;\n  assignment_start_datetime: string;\n  should_be_active: boolean;\n  detail: string;\n  assignment_id: number;\n  id: number;\n  state: TaskStates;\n}\n\ninterface DashboardTasksState {\n  reviewerStatus: boolean;\n  tasks: Task[];\n  loading: boolean;\n  error?: string;\n}\n\nconst initialState: DashboardTasksState = {\n  tasks: [],\n  reviewerStatus: false,\n  loading: false,\n  error: null\n}\n\nconst dashboardTasks = createSlice({\n  name: 'dashboardTasks',\n  initialState,\n  reducers: {\n    getTodosStart (state): void {\n      state.loading = true\n      state.error = null\n    },\n    getTodosSuccess (state, action: PayloadAction<DashboardTasksState>): void {\n      state.tasks = action.payload.tasks\n      state.reviewerStatus = action.payload.reviewerStatus\n      state.loading = false\n    },\n    getTodosFailure (state, action: PayloadAction<string>): void {\n      state.loading = false\n      state.error = action.payload\n    }\n  }\n})\n\nexport default dashboardTasks\n\nexport const fetchDashboardTasks = (): AppThunk => async (dispatch) => {\n  try {\n    dispatch(dashboardTasks.actions.getTodosStart())\n    const response = await axios.get('/orchestra/api/interface/dashboard_tasks/')\n    const data: DashboardTasksState = response.data\n    dispatch(dashboardTasks.actions.getTodosSuccess(data))\n  } catch (err) {\n    dispatch(dashboardTasks.actions.getTodosFailure(err))\n  }\n}\n","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport TasksList from '../../components/TasksList/TasksList'\nimport { fetchDashboardTasks } from 'state/slices/dashboardTasks'\nimport {\n  getActiveTasksSelector,\n  getPendingTasksSelector,\n  getPausedTasksSelector,\n  getCompletedTasksSelector,\n  taskLoadingStateSelector\n} from '../../state/selectors/taskSelectors'\n\nconst Dashboard = () => {\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(fetchDashboardTasks())\n  }, [dispatch])\n\n  const activeTasks = useSelector(getActiveTasksSelector)\n  const pendingTasks = useSelector(getPendingTasksSelector)\n  const pausedTasks = useSelector(getPausedTasksSelector)\n  const completedTasks = useSelector(getCompletedTasksSelector)\n  const isLoading = useSelector(taskLoadingStateSelector)\n\n  return (\n    <div>\n      <TasksList status='success' tasks={activeTasks} isLoading={isLoading} />\n      <TasksList status='warning' tasks={pendingTasks} isLoading={isLoading} />\n      <TasksList status='error' tasks={pausedTasks} isLoading={isLoading} />\n      <TasksList status='default' tasks={completedTasks} isLoading={isLoading} />\n    </div>\n  )\n}\n\nexport default Dashboard\n","import React from 'react'\nimport {\n  useParams\n} from 'react-router-dom'\n\nconst Task = () => {\n  const { taskId } = useParams();\n  return (\n        <div>\n          Task view: { taskId }\n        </div>\n    )\n}\n\nexport default Task;\n","import React from 'react'\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom'\n\nimport Navbar from './components/navbar/Navbar'\nimport AvailableTasks from './views/available_tasks/AvailableTasks'\nimport Dashboard from './views/dashboard/Dashboard'\nimport Task from './views/task/Task'\n\nimport './App.scss'\n\nfunction App () {\n  return (\n    <div className=\"App\">\n      <Router>\n        <div>\n          <Navbar />\n          <Switch>\n            <Route path=\"/task/:taskId\" children={<Task />} />\n            <Route path=\"/project/:projectId?\" children={<div>Project management</div>} />\n            <Route path=\"/timecard\" children={<div>Timecard</div>} />\n            <Route path=\"/communication/available-staffing-requests\" children={<AvailableTasks />} />\n            <Route path=\"/accounts/settings\" children={<div>Account settings</div>} />\n            <Route path=\"/accounts/logout_then_login\" children={<div>Sign out</div>} />\n            <Route path=\"/\" children={<Dashboard />} />\n          </Switch>\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App\n","import { combineReducers } from '@reduxjs/toolkit'\n\nimport dashboardTasks from './slices/dashboardTasks'\nimport timer from './slices/timer'\n\nconst rootReducer = combineReducers({\n  [dashboardTasks.name]: dashboardTasks.reducer,\n  [timer.name]: timer.reducer\n})\n\nexport type RootState = ReturnType<typeof rootReducer>\n\nexport default rootReducer\n","import { configureStore, Action } from '@reduxjs/toolkit'\nimport { ThunkAction } from 'redux-thunk'\n\nimport rootReducer, { RootState } from './rootReducer'\n\nconst store = configureStore({\n  reducer: rootReducer\n})\n\nexport type AppDispatch = typeof store.dispatch\nexport type AppThunk = ThunkAction<void, RootState, unknown, Action<string>>\n\nexport default store\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport * as serviceWorker from './serviceWorker'\n\nimport App from './App'\nimport store from './state/store'\nimport './index.css'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\nserviceWorker.unregister()\n"],"sourceRoot":""}